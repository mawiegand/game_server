var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","map","node","nodescontroller","nodeshelper","create()","create_children()","create_root_node()","destroy()","edit()","index()","new()","root()","roots()","show()","table_name_prefix()","update()","readme_for_app"],"longSearchIndex":["applicationcontroller","applicationhelper","map","map::node","map::nodescontroller","map::nodeshelper","map::nodescontroller#create()","map::node#create_children()","map::node::create_root_node()","map::nodescontroller#destroy()","map::nodescontroller#edit()","map::nodescontroller#index()","map::nodescontroller#new()","map::node::root()","map::node::roots()","map::nodescontroller#show()","map::table_name_prefix()","map::nodescontroller#update()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Map","","Map.html","",""],["Map::Node","","Map/Node.html","","<p>This model realizes a quad-tree (of nodes and leafs) for representing maps\nusing the common tiling.  …\n"],["Map::NodesController","","Map/NodesController.html","",""],["Map::NodesHelper","","Map/NodesHelper.html","",""],["create","Map::NodesController","Map/NodesController.html#method-i-create","()","<p>POST /map/nodes POST /map/nodes.json\n"],["create_children","Map::Node","Map/Node.html#method-i-create_children","()","<p>path: uses microsoft quad-tree notation\n"],["create_root_node","Map::Node","Map/Node.html#method-c-create_root_node","()","<p>a class method that creates the root node of the quad tree. the root node\nhas no parent_id set and is …\n"],["destroy","Map::NodesController","Map/NodesController.html#method-i-destroy","()","<p>DELETE /map/nodes/1 DELETE /map/nodes/1.json\n"],["edit","Map::NodesController","Map/NodesController.html#method-i-edit","()","<p>GET /map/nodes/1/edit\n"],["index","Map::NodesController","Map/NodesController.html#method-i-index","()","<p>GET /map/nodes GET /map/nodes.json\n"],["new","Map::NodesController","Map/NodesController.html#method-i-new","()","<p>GET /map/nodes/new GET /map/nodes/new.json\n"],["root","Map::Node","Map/Node.html#method-c-root","()","<p>returns the first root found in the database (level = 0)\n"],["roots","Map::Node","Map/Node.html#method-c-roots","()","<p>returns all root nodes in the database (level = 0)\n"],["show","Map::NodesController","Map/NodesController.html#method-i-show","()","<p>Shows individual nodes. There are two possibilities for addressing nodes:\n<p>by their id (auto_increment …\n"],["table_name_prefix","Map","Map.html#method-c-table_name_prefix","()",""],["update","Map::NodesController","Map/NodesController.html#method-i-update","()","<p>PUT /map/nodes/1 PUT /map/nodes/1.json\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Use this README file to introduce your application and point to useful\nplaces in the API for learning …\n"]]}}