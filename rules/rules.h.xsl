<?xml version="1.0" encoding="UTF-8"?>

<!-- Stylesheet specifing transformation to generate an ANSI C/C++ header 
     from the rules.xml. 
     
     This file is based on the C-code generation in the open source project
     Uga-Agga that was initially designed and written by Sascha Lange. This
     adapted version of the transformations is written and maintained by 
     Sascha Lange and Patrick Fox. 
     
     Author: Sascha Lange <sascha@5dlab.com>.
     
     All rights reserved, (c) 5D Lab GmbH, 2012. -->
     
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>

<!-- Config -->
<xsl:template match="Rules">
<xsl:text>
<![CDATA[
#ifndef _AWE_RULES_H_
#define _AWE_RULES_H_

/** This file is autogenerated by applying the XSL Transformations defined in
  * rules.h.xsl to the rules specification in rules.xml. DO NOT EDIT THIS FILE
  * MANUALLY as your changes will be overwritten. Edit the transformations
  * (rules.h.xsl and rules.cpp.xsl) instead. 
  *
  * Author: Sascha Lange <sascha@5dlab.com>.
  *
  * All rights reserved, (c) 5D Lab GmbH, 2012. -->
  */
]]></xsl:text>
#define MAX_RESOURCE <xsl:value-of select="count(ResourceTypes/*)"/>
#define MAX_BUILDING <xsl:value-of select="count(BuildingTypes/*)"/>
#define MAX_SCIENCE <xsl:value-of select="count(ScienceTypes/*)"/>
#define MAX_UNIT <xsl:value-of select="count(UnitTypes/*)"/>

enum LocaleSpecifier
{<xsl:for-each select="General/Languages/Language">
  LOCALE_<xsl:value-of select="@locale"/>,</xsl:for-each>
  MAX_LOCALE
};

class Language
{
public:
  static const Language languages[];

  const char *locale;
  const char *name;
  
  Language(const char* locale, const char* name) { this->locale = locale; this->name = name; }
};

class ProductionCost
{
public:
  const Entity *type;
  const char *cost;
};

class Requirement
{
public: 
  const Entity *type;
  double minimum;
  double maximum;
};

/** base class of all interactable / buildable entities in the game that
  * are defined in the rules. */
class Entity	
{
public:
  int objectId;
  const char *name[MAX_LOCALE];
  const char *description[MAX_LOCALE];
  const char *dbFieldName;
  const char *maxLevel;
  int hidden;
};

/** base class of all entities that can be build. */
class BuildableEntity : public Entity
{
public: 
  int position;
  int ratingValue;

  const char *productionTime;
  const ProductionCost *costs;
  int num_costs;

  const Requirement *requirements;
  int num_requirements;
};

class Resource : public Entity
{
public: 
  double ratingValue;
  double takeoverValue;
  const char *production;

  double stealRatio;	/* not implemented */
  double destroyRatio;	/* not implemented */
  const char *safeStorage;
};

class Unit : public BuildableEntity
{
public: 
  int velocity;
  int initiative;
  int attack;
  int armor;
  int criticalHitDamage;
  double criticalHitChance;
  
  int visible;
  int warpoints;
    
  int encumbranceList[MAX_RESOURCE];

  int spyValue;
  double spyChance;
  double spyQuality;
  double antiSpyChance;
};

class Building : public BuildableEntity
{
};

class Science : public BuildableEntity
{
};

class Effect : public Entity
{
};

class Rules 
{
public:
  static const Resource *resources;
  static const Building *buildings;
  static const Science *sciences;
  static const Unit *units;
};


#endif /* _AWE_RULES_H_ */
</xsl:template>

  <!-- Helper variables for realizing lower-case and upper-case with the 
       help of translate. translate('Word', $uppercase, $smallcase) does
       lower-case 'Word' to 'word'. Switching positions of $uppercase and
       $lowercase would uppercase 'Word' to 'WORD'. -->
  <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyzöäü'" />
  <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZÖÄÜ'" />  

</xsl:stylesheet>
