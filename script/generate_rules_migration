#!/usr/bin/env ruby
#
# Helper script to migrate the database to a changed set of rules in case there
# have been introduced new entities (resources, buildings, units, etc.).
#
# Reads a list of attributes / database fields (e.g. those fields generated by the 
# rules converter for holding units, sciences, buildings, etc.), finds those fields
# from the list that are missing in the models and generates a migration that 
# adds exactly the missing fields to the models.
# 
# The models that hold the attributes are defined within this script (so it's engine
# dependent).
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'environment'))

list_of_attributes = []

File.open(File.join(Rails.root, 'rules', 'database_fields'), 'r') do | f |
  list_of_attributes = f.readlines.map { |str| str.chomp }
end


# Here specify for each model which prefixes to check. For example, a table 'Army' might
# need all fields starting with unit_ (because each army may contain units of that type)
# but no fields of other categories (e.g. science_) because an Army does not need to 
# know about them. In this case you would add a line "Army => [ 'unit_' ]," to the hash.
hash_of_models = { 
  Fundamental::Character => [ 'science_' ],
  Map::Region            => [ 'resource_'  ], 
  Military::Army         => [ 'unit_', 'science_' ], 
  Map::Node              => [ ],
}

timestamp = DateTime.now

puts "class RulesMigration#{ timestamp.strftime('%Y%m%d%H%M%S') } < ActiveRecord::Migration"
puts "  def change"

hash_of_models.each do | model, prefixes |

  list_of_attributes.each do | attribute |

    if !model.new.has_attribute?(attribute) && prefixes.any? { | prefix |  attribute.start_with? prefix }
      puts "    add_column :#{ model.table_name },   :#{ attribute },   :integer"
    end

  end
end

puts "  end"
puts "end"