#!/usr/bin/env ruby
#
# Helper script to migrate the database to a changed set of rules in case
# there have been introduced new entities (resources, buildings, units, etc.).
#
# Reads a list of attributes / database fields (e.g. those fields generated by
# the rules converter for holding units, sciences, buildings, etc.), finds
# those fields from the list that are missing in the models and generates a
# migration that adds exactly the missing fields to the models.
# 
# The models that hold the attributes are defined within this script (so it's
# engine dependent).
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'environment'))

list_of_attributes = []

File.open(File.join(Rails.root, 'rules', 'database_fields'), 'r') do | f |
  list_of_attributes = f.readlines.map { |str| str.chomp }
end


# Here specify for each model which prefixes to check. For example, a table
# 'Army' might need all fields starting with unit_ (because each army may
# contain units of that type) but no fields of other categories (e.g.
# science_) because an Army does not need to  know about them. In this case
# you would add a line "Army => [ 'unit_' ]," to the hash.
hash_of_models = { 
  Military::Army            => [ { :prefix => 'unitcategory_', :postfix => '_strength', :type => ':decimal' } ],
  Military::ArmyDetail      => [ { :prefix => 'unit_', :postfix => '' } ],
  Military::BattleFaction   => [ { :prefix => 'unitcategory_', :postfix => '_strength', :type => ':decimal' } ],
  Military::BattleParticipantResult    => [ { :prefix => 'unit_', :postfix => '' },
                                            { :prefix => 'unit_', :postfix => '_casualties' },
                                            { :prefix => 'unit_', :postfix => '_damage_taken', :type => ':decimal' },
                                            { :prefix => 'unit_', :postfix => '_damage_inflicted', :type => ':decimal' },
                                          ],
  Settlement::Settlement    => [ { :prefix => 'settlement_queue', :postfix => '', :options => { :default => 0 } } ],  # add unlock count to settlements
  Fundamental::Character    => [ { :prefix => 'character_queue', :postfix => '', :options => { :default => 0 } } ],   # add unlock count to characters
  Fundamental::Alliance     => [ { :prefix => 'alliance_queue', :postfix => '', :options => { :default => 0 } } ],    # add unlock count to alliances
}

timestamp = DateTime.now

fields = ""

str  = "class Rules#{timestamp.strftime('%Y%m%d%H%M%S')} < ActiveRecord::Migration\n"
str += "  def change\n"

hash_of_models.each do | model, prefixes |
  
  list_of_attributes.each do | attribute |
    
    prefixes.each do | prefix |
      
      if attribute.start_with?(prefix[:prefix]) && !model.new.has_attribute?(attribute+prefix[:postfix])
        fields += "    add_column :#{ model.table_name },   :#{ attribute+prefix[:postfix] },   #{ prefix[:type].nil? ? ':integer' : prefix[:type]  }, :options => #{ prefix[:options].nil? ? '{}' : prefix[:options] }    \n"
      end
      
    end
  end
end

str += fields

str += "  end\n"
str += "end\n"


if fields.length > 1
  file = File.new(File.join(Rails.root, 'db', 'migrate', timestamp.strftime('%Y%m%d%H%M%S')+'_rules'+timestamp.strftime('%Y%m%d%H%M%S')+'.rb'), 'w' );
  if file
    
    file.syswrite(str)
    file.close
    puts "Created new migration. run rake db:migrate to apply."
  else 
    puts "ERROR: could not write migration."
  end
else 
  puts "Did not create migration, database is up to date."
end
