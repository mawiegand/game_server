#!/usr/bin/env ruby
#
# Helper script to reassign terrain and corresponding names to all regions in the game.
#

puts "Resets the terrain types of all regions in the game."
puts
puts "Starting..."

terrains     = ['plain', 'forest', 'mountain', 'desert', 'swamp']
weights      = [ 16, 16, 1, 4, 4 ]   # non-negative integers controlling the frequency of terrain types: p(x) = weight_of_x / total_sum_of_weights

lookup = []
weights.each_index { |i| weights[i].times { lookup.push i } }



require File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'environment'))

STDOUT.sync = true

names    = []

terrains.each do |terrain|

  print "loading names for terrain #{terrain}... "  
  
  # construct filenames
  filename   = File.expand_path(File.join(File.dirname(__FILE__), "..", "rules", "region_names", "#{terrain}.txt"))
  names << File.open(filename).readlines
  
  puts "found #{ names.last.count } names to chose from." 
end

puts "using terrain type id sample list: #{ lookup.inspect }."

puts "changing #{Map::Region.count} region terrains and names..."

Map::Region.find(:all).each do |region|
  region.terrain_id = lookup.sample
  weights = 0 
  
  old_name = region.name
  new_name = names[region.terrain_id].sample.chomp
  names[region.terrain_id].delete(new_name)
  region.name = new_name
  region.fortress.name = "Festung #{ new_name }"
  #puts "Festung #{ region.fortress.inspect} #{ region.fortress.name }."
  region.fortress.save
  region.save
# puts "Changed region name from #{old_name} to #{new_name}."
end

puts "Done."


