#!/usr/bin/env ruby
#
# Helper script that runs all consistency checks and repairs inconsistencies
# on the fly.
#

require File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'environment'))

STDOUT.sync = true

puts
puts "This script checks incrementally updated database fields "
puts "like e.g. the resource_X_production_rate for incosistencies "
puts "that is, differences between the value the field should have "
puts "due to the existing infrastructure and effects and the value "
puts "presently stored in the database. The script also repairs "
puts "detected inconsistencies on the fly."
puts 
puts "You can find details on the detected and repaired "
puts "inconsistencies in the environment specific log-file."
puts 
puts "This script should usually be started after a larger "
puts "change of the game rules during a running game."
puts


# ############################################################################
#
#   ALLIANCES
#
# ############################################################################


print "CHECKING Alliances "

step = Fundamental::Alliance.count / 10  
step = step > 0 ? step : 1

count = 0

Fundamental::Alliance.find(:all).each do |alliance|
	if count.modulo(step) == 0 
	  print "." 
	  sleep (1)
	end
	alliance.check_consistency
end
puts " done."



# ############################################################################
#
#   SETTLEMENTS
#
# ############################################################################

print "CHECKING Settlements "

step = Settlement::Settlement.count / 10 
step = step > 0 ? step : 1
count = 0

Settlement::Settlement.find(:all).each do |settlement|
	if count.modulo(step) == 0 
	  print "." 
	  sleep (1)
	end
	settlement.check_consistency
	count += 1 
end
puts " done."


# ############################################################################
#
#   RESOURCE POOLS
#
# ############################################################################

print "CHECKING Resource Pools "

step = Fundamental::ResourcePool.count / 10 
step = step > 0 ? step : 1
count = 0

Fundamental::ResourcePool.find(:all).each do |pool|
	if count.modulo(step) == 0 
	  print "." 
	  sleep (1)
	end
	pool.check_consistency
	count += 1 
end
puts " done."


# ############################################################################
#
#   CHARACTERS
#
# ############################################################################

print "CHECKING Characters "

step = Fundamental::Character.count / 10 
step = step > 0 ? step : 1
count = 0

Fundamental::Character.find(:all).each do |character|
	if count.modulo(step) == 0 
	  print "." 
	  sleep (1)
	end
	character.check_consistency
	character.ranking.check_consistency unless character.ranking.nil?
	count += 1 
end
puts " done."

# ############################################################################
#
#   OWNER NAMES
#
# ############################################################################


print "CHECKING Owner Names "

step = Settlement::Settlement.count / 10  
step = step > 0 ? step : 1

count = 0

Settlement::Settlement.find(:all).each do |settlement|
	if count.modulo(step) == 0 
	  print "." 
	  sleep (1)
	end
	
	if settlement.owner_id != settlement.location.owner_id
	  Rails.logger.warn(">>> ERROR: OWNER DIFFERS for location id #{settlement.location.id}. S: #{settlement.owner_id} L: #{settlement.location.onwer_id}.")
	  settlement.location.set_owner_and_alliance(settlement.owner_id, settlement.alliance_id)
	  settlement.location.save
  end

  onwership_ok = true
	if (settlement.owns_region? && settlement.location.slot != 0) || (!settlement.owns_region? && settlement.location.slot == 0)
	  Rails.logger.error(">>> FATAL ERROR: region ownership broken for settlement id #{settlement.id} and region id #{settlement.region.id}. owns region: #{settlement.owns_region?}.")
    ownership_ok = false
	end

	if onwership_ok && settlement.owns_region? && settlement.owner_id != settlement.region.owner_id
	  Rails.logger.warn(">>> ERROR: OWNER DIFFERS for region id #{settlement.region.id}. S: #{settlement.owner_id} R: #{settlement.region.owner_id}.")
	  settlement.region.set_owner_and_alliance(settlement.owner_id, settlement.alliance_id)
	  settlement.region.save
  end  

  count += 1
end
puts " done."

# ############################################################################
#
#   MESSAGES
#
# ############################################################################

print "CHECKING Unread Messages "
Messaging::Inbox.all.each { |i| i.unread_messages_count = i.unread_entries.count; i.save }
puts " done."


# ############################################################################
#
#   TUTORIAL STATES
#
# ############################################################################


print "CHECKING Tutorial States "

step = Tutorial::State.count / 10  
step = step > 0 ? step : 1

count = 0

Tutorial::State.all.each do |state|
  if count.modulo(step) == 0 
    print "." 
    sleep (1)
  end
  
  state.check_consistency
  
  count += 1
end
puts " done."


# ############################################################################
#
#   ROUND INFO
#
# ############################################################################


print "CHECKING Round Info "

regions_count = Map::Region.count

round_info = Fundamental::RoundInfo.find(1)
round_info.regions_count = regions_count
round_info.save

puts ". done."

puts
