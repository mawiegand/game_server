#!/usr/bin/env ruby
#
# Helper script to migrate the database to a changed set of rules in case
# there have been introduced new entities (resources, buildings, units, etc.).
#
# Reads a list of attributes / database fields (e.g. those fields generated by
# the rules converter for holding units, sciences, buildings, etc.), finds
# those fields from the list that are missing in the models and generates a
# migration that adds exactly the missing fields to the models.
# 
# The models that hold the attributes are defined within this script (so it's
# engine dependent).
require File.expand_path(File.join(File.dirname(__FILE__), '..', '..', 'config', 'environment'))

list_of_attributes = []

File.open(File.join(Rails.root, 'rules', 'database_fields'), 'r') do | f |
  list_of_attributes = f.readlines.map { |str| str.chomp }
end


# Here specify for each model which prefixes to check. For example, a table
# 'Army' might need all fields starting with unit_ (because each army may
# contain units of that type) but no fields of other categories (e.g.
# science_) because an Army does not need to  know about them. In this case
# you would add a line "Army => [ 'unit_' ]," to the hash.
hash_of_models = { 
  Military::Army             => [ { :prefix => 'unitcategory_',    :postfix => '_strength',                   :type => ':decimal' } ],
  Military::ArmyDetail       => [ { :prefix => 'unit_',            :postfix => '' } ],
  Military::BattleFaction    => [ { :prefix => 'unitcategory_',    :postfix => '_strength',                   :type => ':decimal' } ],
  Military::BattleParticipantResult    => [ { :prefix => 'unit_',  :postfix => '' },
                                            { :prefix => 'unit_',  :postfix => '_casualties' },
                                            { :prefix => 'unit_',  :postfix => '_damage_taken',               :type => ':decimal' },
                                            { :prefix => 'unit_',  :postfix => '_damage_inflicted',           :type => ':decimal' },
  ],
  Action::Trading::TradingCartsAction=> [ { :prefix => 'resource_',:postfix => '_amount',                     :type => ':integer' } ],
  Backend::TradeLogEntry     => [ { :prefix => 'resource_',        :postfix => '_amount',                     :type => ':integer', :options => { :default => 0, :null => false } } ],
  Settlement::Settlement     => [ { :prefix => 'settlement_queue', :postfix => '',                                                 :options => { :default => 0   } },  # queue unlocks
                                  { :prefix => 'settlement_unlock',:postfix => '',                                                 :options => { :default => 0   } },  # queue unlocks
                                  { :prefix => 'resource_',        :postfix => '_capacity',                   :type => ':decimal', :options => { :default => 0.0 } },
                                  { :prefix => 'resource_',        :postfix => '_production_rate',            :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_base_production',            :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_tax_rate',        :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_bonus',           :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_bonus_buildings', :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_bonus_sciences',  :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_bonus_alliance',  :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_bonus_effects',   :type => ':decimal', :options => { :default => 0.0 } },
                                  { :prefix => 'resource_',        :postfix => '_production_bonus_global_effects',   :type => ':decimal', :options => { :default => 0.0 } },
  ],  # add unlock count and resource-production fields to settlements

  Fundamental::ResourcePool  => [ { :prefix => 'resource_',        :postfix => '_amount',                     :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_capacity',                   :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_rate',            :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_bonus_effects',   :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_bonus_alliance',  :type => ':decimal', :options => { :default => 0.0 } },
  ],

  Backend::Stat              => [ { :prefix => 'resource_',        :postfix => '_amount_sum',                 :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_amount_max',                 :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_rate_sum',        :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'resource_',        :postfix => '_production_rate_max',        :type => ':decimal', :options => { :default => 0.0 } }, 
  ],

  Backend::TutorialStat      => [ { :prefix => 'quest_',           :postfix => '_num_finished_day_1',         :type => ':integer', :options => { :default => 0   } }, 
                                  { :prefix => 'quest_',           :postfix => '_num_started_day_1',          :type => ':integer', :options => { :default => 0   } }, 
                                  { :prefix => 'quest_',           :postfix => '_playtime_finished_day_1',    :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'quest_',           :postfix => '_playtime_started_day_1',     :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'quest_',           :postfix => '_num_finished',               :type => ':integer', :options => { :default => 0   } }, 
                                  { :prefix => 'quest_',           :postfix => '_num_started',                :type => ':integer', :options => { :default => 0   } }, 
                                  { :prefix => 'quest_',           :postfix => '_playtime_finished',          :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'quest_',           :postfix => '_playtime_started',           :type => ':decimal', :options => { :default => 0.0 } }, 
                                  { :prefix => 'quest_',           :postfix => '_retention_rate_week_1',      :type => ':decimal', :options => { :default => 0.0 } }, 

  ],
  
  Fundamental::Character     => [ { :prefix => 'character_queue',  :postfix => '',                                                 :options => { :default => 0   } },
                                  { :prefix => 'character_unlock', :postfix => '',                                                 :options => { :default => 0   } },  # queue unlocks 
  ],  # add unlock count to characters
  Fundamental::Alliance      => [ { :prefix => 'alliance_queue',   :postfix => '',                                                 :options => { :default => 0   } },
                                  { :prefix => 'alliance_unlock',  :postfix => '',                                                 :options => { :default => 0   } },  # queue unlocks 
                                  { :prefix => 'resource_',        :postfix => '_production_bonus_effects',   :type => ':decimal', :options => { :default => 0.0 } },
  ],  # add unlock count to alliances
}

timestamp = DateTime.now

fields = ""

str  = "class Rules#{timestamp.strftime('%Y%m%d%H%M%S')} < ActiveRecord::Migration\n"
str += "  def change\n"

hash_of_models.each do | model, prefixes |
  
  list_of_attributes.each do | attribute |
    
    prefixes.each do | prefix |
      
      if attribute.start_with?(prefix[:prefix]) && !model.new.has_attribute?(attribute+prefix[:postfix])
        fields += "    add_column :#{ model.table_name },   :#{ attribute+prefix[:postfix] },   #{ prefix[:type].nil? ? ':integer' : prefix[:type]  },  #{ prefix[:options].nil? ? '{}' : prefix[:options] }    \n"
      end
      
    end
  end
end

str += fields

str += "  end\n"
str += "end\n"


if fields.length > 1
  file = File.new(File.join(Rails.root, 'db', 'migrate', timestamp.strftime('%Y%m%d%H%M%S')+'_rules'+timestamp.strftime('%Y%m%d%H%M%S')+'.rb'), 'w' );
  if file
    
    file.syswrite(str)
    file.close
    puts "Created new migration. run rake db:migrate to apply."
  else 
    puts "ERROR: could not write migration."
  end
else 
  puts "Did not create migration, database is up to date."
end
